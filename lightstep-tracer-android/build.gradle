// This sets up the dependencies for the build script *itself*, not the package.
buildscript {
    // Work around a defect in the 'android-library' plugin's version check
    System.properties['com.android.build.gradle.overrideVersionCheck'] = 'true'

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.2'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    }
}


apply plugin: 'com.android.library'

project.version = current_version

def siteUrl = 'https://github.com/lightstep/lightstep-tracer-java'
def gitUrl = 'https://github.com/lightstep/lightstep-tracer-java.git'

android {
    compileSdkVersion 25
    buildToolsVersion "26.0.0"
    resourcePrefix "lightstep__"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 25
        versionCode 2
        versionName version
    }

    buildTypes {
    }

    lintOptions {
        lintConfig file("lightstep-tracer-android/lint.xml")
    }

    compileOptions {
        targetCompatibility = '1.7'
        sourceCompatibility = '1.7'
    }
}

repositories {
    jcenter()
    maven {
        // published beta artifacts of opentracing API
        url  "http://oss.jfrog.org/oss-snapshot-local/"
    }
}

dependencies {
    compile(project(':java-common')) {
        // Not needed on Android
        exclude module: 'httpclient'
    }
}

task sourcesJar(type: Jar) {
    from {
        android.sourceSets.main.java.srcDirs
        configurations.compile.collect { it.isDirectory()? it : zipTree(it) }
    }
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}
